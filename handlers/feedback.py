from aiogram import types, Bot, Dispatcher
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from states.forms import FeedbackForm
from config.config import GROUP_ID, MESSAGE_THREAD_ID
import logging

def register_feedback_handlers(dp: Dispatcher):
    dp.message.register(start_feedback, Command('feedback'))
    dp.message.register(request_media_for_feedback, 
                       FeedbackForm.waiting,
                       lambda message: message.text == "–î–æ–±–∞–≤–∏—Ç—å –º–µ–¥–∏–∞")
    dp.message.register(process_feedback_text,
                       FeedbackForm.waiting,
                       lambda message: message.text != "–î–æ–±–∞–≤–∏—Ç—å –º–µ–¥–∏–∞")
    dp.message.register(process_feedback_with_media,
                       FeedbackForm.media_processing,
                       lambda message: message.video or message.audio or 
                                     message.video_note or message.voice)
    dp.message.register(process_feedback_media_fallback,
                       FeedbackForm.media_processing)

async def start_feedback(message: types.Message, state: FSMContext):
    await state.set_state(FeedbackForm.waiting)
    markup = types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –±–µ–∑ –º–µ–¥–∏–∞")],
            [types.KeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –º–µ–¥–∏–∞")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤:", reply_markup=markup)

async def request_media_for_feedback(message: types.Message, state: FSMContext):
    await state.set_state(FeedbackForm.media_processing)
    await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ –≤–∏–¥–µ–æ, –∞—É–¥–∏–æ, –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∫—Ä—É–≥–æ–≤–æ–µ –≤–∏–¥–µ–æ:",
        reply_markup=types.ReplyKeyboardRemove()
    )

async def process_feedback_text(message: types.Message, state: FSMContext):
    if message.text == "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –±–µ–∑ –º–µ–¥–∏–∞":
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤:")
        return
    
    username = message.from_user.username or message.from_user.full_name
    feedback_text = f"üìù –û—Ç–∑—ã–≤ –æ—Ç @{username}:\n\n{message.text}"
    await message.bot.send_message(GROUP_ID, feedback_text, message_thread_id=MESSAGE_THREAD_ID)
    await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤ ‚Äî —ç—Ç–æ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º —Å—Ç–∞—Ç—å –ª—É—á—à–µ üñ§")
    await state.clear()

async def process_feedback_with_media(message: types.Message, state: FSMContext):
    username = message.from_user.username or message.from_user.full_name
    caption = message.caption or "–û—Ç–∑—ã–≤ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞"
    header_text = f"üìù –û—Ç–∑—ã–≤ —Å –º–µ–¥–∏–∞ –æ—Ç @{username}:\n\n{caption}"
    
    try:
        if message.video:
            await message.bot.send_video(GROUP_ID, message.video.file_id, caption=header_text, message_thread_id=MESSAGE_THREAD_ID)
        elif message.audio:
            await message.bot.send_audio(GROUP_ID, message.audio.file_id, caption=header_text, message_thread_id=MESSAGE_THREAD_ID)
        elif message.voice:
            await message.bot.send_voice(GROUP_ID, message.voice.file_id, caption=header_text, message_thread_id=MESSAGE_THREAD_ID)
        elif message.video_note:
            await message.bot.send_message(GROUP_ID, header_text, message_thread_id=MESSAGE_THREAD_ID)
            await message.bot.send_video_note(GROUP_ID, message.video_note.file_id, message_thread_id=MESSAGE_THREAD_ID)
        
        await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤ —Å –º–µ–¥–∏–∞ ‚Äî —ç—Ç–æ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º —Å—Ç–∞—Ç—å –ª—É—á—à–µ üñ§")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–µ–¥–∏–∞: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–µ–¥–∏–∞")
    await state.clear()

async def process_feedback_media_fallback(message: types.Message, state: FSMContext):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.") 