from aiogram import types, Bot, Dispatcher
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from states.forms import FeedbackForm
from config.config import GROUP_ID, MESSAGE_THREAD_ID
import logging

def register_feedback_handlers(dp: Dispatcher):
    dp.message.register(start_feedback, Command('feedback'))
    dp.message.register(process_feedback_message, 
                       FeedbackForm.collecting,
                       lambda message: message.text and message.text != "/delete")
    dp.message.register(process_feedback_media, 
                       FeedbackForm.collecting,
                       lambda message: message.photo or message.video or 
                                     message.voice or message.video_note or 
                                     message.audio)
    dp.callback_query.register(handle_feedback_callback, FeedbackForm.collecting)

async def start_feedback(message: types.Message, state: FSMContext):
    await state.set_state(FeedbackForm.collecting)
    await state.update_data(messages=[])
    
    markup = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="finish_feedback")],
        [types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_feedback")]
    ])
    
    await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–∑—ã–≤–∞.\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–¥—Ä—è–¥ (—Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è).\n"
        "–ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ó–∞–≤–µ—Ä—à–∏—Ç—å'.\n\n"
        "–ß—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /delete\n"
        "–ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –æ—Ç–∑—ã–≤–∞, –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–º–µ–Ω–∏—Ç—å'",
        reply_markup=markup
    )

async def process_feedback_message(message: types.Message, state: FSMContext):
    if message.text == "/delete":
        data = await state.get_data()
        messages = data.get("messages", [])
        if messages:
            messages.pop()
            await state.update_data(messages=messages)
            await message.answer("‚úÖ –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ")
        else:
            await message.answer("‚ùå –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
        return

    data = await state.get_data()
    messages = data.get("messages", [])
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–æ–±—â–µ–Ω–∏–∏
    message_data = {
        "type": "text",
        "content": message.text
    }
    messages.append(message_data)
    await state.update_data(messages=messages)
    
    await message.answer("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –∫ –æ—Ç–∑—ã–≤—É")

async def process_feedback_media(message: types.Message, state: FSMContext):
    data = await state.get_data()
    messages = data.get("messages", [])
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ–¥–∏–∞
    message_data = {
        "type": "media",
        "file_id": None,
        "caption": message.caption
    }
    
    if message.photo:
        message_data["type"] = "photo"
        message_data["file_id"] = message.photo[-1].file_id
    elif message.video:
        message_data["type"] = "video"
        message_data["file_id"] = message.video.file_id
    elif message.voice:
        message_data["type"] = "voice"
        message_data["file_id"] = message.voice.file_id
    elif message.video_note:
        message_data["type"] = "video_note"
        message_data["file_id"] = message.video_note.file_id
    elif message.audio:
        message_data["type"] = "audio"
        message_data["file_id"] = message.audio.file_id
    
    messages.append(message_data)
    await state.update_data(messages=messages)
    
    await message.answer("‚úÖ –ú–µ–¥–∏–∞ –¥–æ–±–∞–≤–ª–µ–Ω–æ –∫ –æ—Ç–∑—ã–≤—É")

async def handle_feedback_callback(callback_query: types.CallbackQuery, state: FSMContext):
    if callback_query.data == "finish_feedback":
        data = await state.get_data()
        messages = data.get("messages", [])
        
        if not messages:
            await callback_query.message.answer("‚ùå –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏")
            return
        
        username = callback_query.from_user.username or callback_query.from_user.full_name
        header = f"üìù –û—Ç–∑—ã–≤ –æ—Ç @{username}:\n\n"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É
        for msg in messages:
            try:
                if msg["type"] == "text":
                    await callback_query.bot.send_message(
                        GROUP_ID,
                        header + msg["content"],
                        message_thread_id=MESSAGE_THREAD_ID
                    )
                elif msg["type"] == "photo":
                    await callback_query.bot.send_photo(
                        GROUP_ID,
                        msg["file_id"],
                        caption=header + (msg["caption"] or ""),
                        message_thread_id=MESSAGE_THREAD_ID
                    )
                elif msg["type"] == "video":
                    await callback_query.bot.send_video(
                        GROUP_ID,
                        msg["file_id"],
                        caption=header + (msg["caption"] or ""),
                        message_thread_id=MESSAGE_THREAD_ID
                    )
                elif msg["type"] == "voice":
                    await callback_query.bot.send_voice(
                        GROUP_ID,
                        msg["file_id"],
                        caption=header + (msg["caption"] or ""),
                        message_thread_id=MESSAGE_THREAD_ID
                    )
                elif msg["type"] == "video_note":
                    await callback_query.bot.send_message(
                        GROUP_ID,
                        header,
                        message_thread_id=MESSAGE_THREAD_ID
                    )
                    await callback_query.bot.send_video_note(
                        GROUP_ID,
                        msg["file_id"],
                        message_thread_id=MESSAGE_THREAD_ID
                    )
                elif msg["type"] == "audio":
                    await callback_query.bot.send_audio(
                        GROUP_ID,
                        msg["file_id"],
                        caption=header + (msg["caption"] or ""),
                        message_thread_id=MESSAGE_THREAD_ID
                    )
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        
        await state.clear()
        await callback_query.message.answer(
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤ ‚Äî —ç—Ç–æ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º —Å—Ç–∞—Ç—å –ª—É—á—à–µ üñ§",
            reply_markup=types.ReplyKeyboardRemove()
        )
    
    elif callback_query.data == "cancel_feedback":
        await state.clear()
        await callback_query.message.answer(
            "‚ùå –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–∑—ã–≤–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞",
            reply_markup=types.ReplyKeyboardRemove()
        )
    
    await callback_query.answer() 