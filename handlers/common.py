from aiogram import types
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
import logging

async def send_welcome(message: types.Message):
    text = (
        "–ü—Ä–∏–≤–µ—Ç!\n\n–†–∞–¥—ã –≤–∏–¥–µ—Ç—å —Ç–µ–±—è –≤ –Ω–∞—à–µ–º –±–æ—Ç–µ! –û —á—ë–º –±—ã —Ç—ã —Ö–æ—Ç–µ–ª —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å? üßø\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/feedback - –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤\n"
        "/question - –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å\n"
        "/history - –†–∞—Å—Å–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é\n"
        "/expert - –°—Ç–∞—Ç—å —ç–∫—Å–ø–µ—Ä—Ç–æ–º\n"
        "/guest - –°—Ç–∞—Ç—å –≥–æ—Å—Ç–µ–º\n"
        "/cancel - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ"
    )
    await message.answer(text, reply_markup=types.ReplyKeyboardRemove())

async def cancel_handler(message: types.Message, state: FSMContext):
    try:
        current_state = await state.get_state()
        if not current_state:
            await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –æ—Ç–º–µ–Ω—ã")
            return
        
        await state.clear()
        await message.answer(
            "‚úÖ –û–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω",
            reply_markup=types.ReplyKeyboardRemove()
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ: {e}")
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –æ–ø—Ä–æ—Å") 