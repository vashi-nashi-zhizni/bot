from aiogram import types, Bot, Dispatcher
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from states.forms import ExpertForm
from config.config import GROUP_ID, MESSAGE_THREAD_ID
import logging

def register_expert_handlers(dp: Dispatcher):
    dp.message.register(start_expert_form, Command('expert'))
    dp.message.register(process_name, StateFilter(ExpertForm.name))
    dp.message.register(process_country, StateFilter(ExpertForm.country))
    dp.message.register(process_job, StateFilter(ExpertForm.job))
    dp.message.register(process_specialization, StateFilter(ExpertForm.specialization))
    dp.message.register(process_topic, StateFilter(ExpertForm.topic))
    dp.message.register(process_meeting_time, StateFilter(ExpertForm.meeting_time))
    dp.message.register(process_motivation, StateFilter(ExpertForm.motivation))

async def start_expert_form(message: types.Message, state: FSMContext):
    await state.set_state(ExpertForm.name)
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã:\n1. –ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?")

async def process_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(ExpertForm.country)
    await message.answer("2. –í –∫–∞–∫–æ–π –≤—ã —Å–µ–π—á–∞—Å —Å—Ç—Ä–∞–Ω–µ?")

async def process_country(message: types.Message, state: FSMContext):
    await state.update_data(country=message.text)
    await state.set_state(ExpertForm.job)
    await message.answer("3. –ö–µ–º –≤—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ?")

async def process_job(message: types.Message, state: FSMContext):
    await state.update_data(job=message.text)
    await state.set_state(ExpertForm.specialization)
    await message.answer("4. –ù–∞ —á—ë–º –≤—ã —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç–µ—Å—å?")

async def process_specialization(message: types.Message, state: FSMContext):
    await state.update_data(specialization=message.text)
    await state.set_state(ExpertForm.topic)
    await message.answer("5. –ö–∞–∫—É—é —Ç–µ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ —Ä–∞—Å–∫—Ä—ã—Ç—å –≤ –ø–æ–¥–∫–∞—Å—Ç–µ ¬´–í–ù–ñ¬ª?")

async def process_topic(message: types.Message, state: FSMContext):
    await state.update_data(topic=message.text)
    await state.set_state(ExpertForm.meeting_time)
    await message.answer("6. –ö–æ–≥–¥–∞ –≤—ã –≥–æ—Ç–æ–≤—ã –≤—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è? (–î–∞—Ç—ã –∏ –≤—Ä–µ–º—è)")

async def process_meeting_time(message: types.Message, state: FSMContext):
    await state.update_data(meeting_time=message.text)
    await state.set_state(ExpertForm.motivation)
    await message.answer("7. –ü–æ—á–µ–º—É —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –Ω–∞–º?")

async def process_motivation(message: types.Message, state: FSMContext):
    data = await state.get_data()
    username = message.from_user.username or message.from_user.full_name
    
    expert_data = (
        f"üéôÔ∏è –ê–Ω–∫–µ—Ç–∞ —ç–∫—Å–ø–µ—Ä—Ç–∞ –æ—Ç @{username}:\n\n"
        f"1. –ò–º—è: {data['name']}\n"
        f"2. –°—Ç—Ä–∞–Ω–∞: {data['country']}\n"
        f"3. –ü—Ä–æ—Ñ–µ—Å—Å–∏—è: {data['job']}\n"
        f"4. –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: {data['specialization']}\n"
        f"5. –¢–µ–º–∞: {data['topic']}\n"
        f"6. –í—Ä–µ–º—è –≤—Å—Ç—Ä–µ—á–∏: {data['meeting_time']}\n"
        f"7. –ú–æ—Ç–∏–≤–∞—Ü–∏—è: {message.text}"
    )
    
    await message.bot.send_message(GROUP_ID, expert_data, message_thread_id=MESSAGE_THREAD_ID)
    await state.clear()
    await message.answer(
        "–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –Ω–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã!\n\n"
        "–ß—Ç–æ –¥–∞–ª—å—à–µ?\n\n"
        "üßø –î–æ–∂–¥–∏—Ç–µ—Å—å –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –ø–æ –∞–Ω–∫–µ—Ç–µ\n"
        "üßø –í—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è –Ω–∞ –ø—Ä–µ–¥–∏–Ω—Ç–µ—Ä–≤—å—é –≤ Zoom"
    ) 