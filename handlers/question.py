from aiogram import types, Bot, Dispatcher
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from states.forms import QuestionState
from config.config import GROUP_ID, MESSAGE_THREAD_ID
import logging

def register_question_handlers(dp: Dispatcher):
    dp.message.register(start_question, Command('question'))
    dp.message.register(request_media_for_question,
                       QuestionState.waiting,
                       lambda message: message.text == "–î–æ–±–∞–≤–∏—Ç—å –º–µ–¥–∏–∞")
    dp.message.register(process_question_text,
                       QuestionState.waiting,
                       lambda message: message.text != "–î–æ–±–∞–≤–∏—Ç—å –º–µ–¥–∏–∞")
    dp.message.register(process_question_with_media,
                       QuestionState.media_processing,
                       lambda message: message.video or message.audio or 
                                     message.video_note or message.voice)
    dp.message.register(process_question_media_fallback,
                       QuestionState.media_processing)

async def start_question(message: types.Message, state: FSMContext):
    await state.set_state(QuestionState.waiting)
    markup = types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –±–µ–∑ –º–µ–¥–∏–∞")],
            [types.KeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –º–µ–¥–∏–∞")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:", reply_markup=markup)

# –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ start_question
async def request_media_for_question(message: types.Message, state: FSMContext):
    await state.set_state(QuestionState.media_processing)
    await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ –≤–∏–¥–µ–æ, –∞—É–¥–∏–æ, –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∫—Ä—É–≥–æ–≤–æ–µ –≤–∏–¥–µ–æ:",
        reply_markup=types.ReplyKeyboardRemove()
    )

async def process_question_text(message: types.Message, state: FSMContext):
    if message.text == "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –±–µ–∑ –º–µ–¥–∏–∞":
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:")
        return
    
    username = message.from_user.username or message.from_user.full_name
    question_text = f"‚ùì –í–æ–ø—Ä–æ—Å –æ—Ç @{username} (ID: {message.from_user.id}):\n\n{message.text}"
    await message.bot.send_message(GROUP_ID, question_text, message_thread_id=MESSAGE_THREAD_ID)
    await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å! –û—Ç–≤–µ—Ç–∏–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è üßø")
    await state.clear()

async def process_question_with_media(message: types.Message, state: FSMContext):
    username = message.from_user.username or message.from_user.full_name
    caption = message.caption or "–í–æ–ø—Ä–æ—Å –±–µ–∑ —Ç–µ–∫—Å—Ç–∞"
    header_text = f"‚ùì –í–æ–ø—Ä–æ—Å —Å –º–µ–¥–∏–∞ –æ—Ç @{username} (ID: {message.from_user.id}):\n\n{caption}"
    
    try:
        if message.video:
            await message.bot.send_video(GROUP_ID, message.video.file_id, caption=header_text, message_thread_id=MESSAGE_THREAD_ID)
        elif message.audio:
            await message.bot.send_audio(GROUP_ID, message.audio.file_id, caption=header_text, message_thread_id=MESSAGE_THREAD_ID)
        elif message.voice:
            await message.bot.send_voice(GROUP_ID, message.voice.file_id, caption=header_text, message_thread_id=MESSAGE_THREAD_ID)
        elif message.video_note:
            await message.bot.send_message(GROUP_ID, header_text, message_thread_id=MESSAGE_THREAD_ID)
            await message.bot.send_video_note(GROUP_ID, message.video_note.file_id, message_thread_id=MESSAGE_THREAD_ID)
        
        await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å —Å –º–µ–¥–∏–∞! –û—Ç–≤–µ—Ç–∏–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è üßø")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–µ–¥–∏–∞: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–µ–¥–∏–∞")
    await state.clear()

async def process_question_media_fallback(message: types.Message, state: FSMContext):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.")

# –û—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ question –ø–µ—Ä–µ–Ω–æ—Å—è—Ç—Å—è –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ 