name: Deploy Bot

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/vash-nash-bot:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-test:
    needs: build
    runs-on: ubuntu-latest
    timeout-minutes: 10
    environment: 
      name: test
      url: https://t.me/vash_nash_test_bot
    
    steps:
      - name: Deploy to test server
        uses: appleboy/ssh-action@master
        env:
          BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
          GROUP_ID: ${{ secrets.GROUP_ID }}
          MESSAGE_THREAD_ID: ${{ secrets.MESSAGE_THREAD_ID }}
          GITHUB_SHA: ${{ github.sha }}
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          envs: BOT_TOKEN,GROUP_ID,MESSAGE_THREAD_ID,GITHUB_SHA,DOCKERHUB_USERNAME
          script: |
            echo "Starting deployment..."
            
            # Проверяем и устанавливаем необходимые пакеты
            if ! command -v docker &> /dev/null; then
              echo "Docker не установлен. Установка..."
              sudo apt-get update
              sudo apt-get install -y docker.io
            fi

            # Проверяем права доступа к docker
            if ! groups | grep -q docker; then
              echo "Добавляем пользователя в группу docker..."
              sudo usermod -aG docker $USER
              newgrp docker
            fi

            if ! command -v curl &> /dev/null; then
              echo "Curl не установлен. Установка..."
              sudo apt-get update
              sudo apt-get install -y curl
            fi
            
            # Создаем директорию если её нет
            mkdir -p ~/test-bot
            
            # Создаем docker-compose.yml
            cat > ~/test-bot/docker-compose.yml << EOL
            version: '3.8'
            
            services:
              bot:
                image: ${DOCKERHUB_USERNAME}/vash-nash-bot:${GITHUB_SHA}
                env_file: .env
                restart: unless-stopped
            EOL
            
            # Создаем или обновляем .env файл
            echo "BOT_TOKEN=$BOT_TOKEN" > ~/test-bot/.env
            echo "GROUP_ID=$GROUP_ID" >> ~/test-bot/.env
            echo "MESSAGE_THREAD_ID=$MESSAGE_THREAD_ID" >> ~/test-bot/.env
            echo "GITHUB_SHA=$GITHUB_SHA" >> ~/test-bot/.env
            
            # Устанавливаем docker compose если его нет
            if ! command -v docker-compose &> /dev/null; then
              echo "Docker Compose не установлен. Установка..."
              sudo mkdir -p /usr/local/bin
              sudo curl -L "https://github.com/docker/compose/releases/download/v2.24.5/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
              sudo chmod +x /usr/local/bin/docker-compose
              
              if ! command -v docker-compose &> /dev/null; then
                echo "Ошибка: Docker Compose не установлен"
                exit 1
              fi
            fi
            
            cd ~/test-bot
            
            echo "Stopping old containers..."
            docker-compose down || true
            
            echo "Pulling image: ${DOCKERHUB_USERNAME}/vash-nash-bot:${GITHUB_SHA}"
            docker-compose pull
            
            echo "Starting container..."
            docker-compose up -d
            
            echo "Checking container status..."
            docker-compose ps

  deploy-prod:
    needs: [build, deploy-test]
    runs-on: ubuntu-latest
    timeout-minutes: 10
    environment:
      name: production
      url: https://t.me/Vash_Nash_bot

    steps:
      - name: Deploy to production server
        uses: appleboy/ssh-action@master
        env:
          BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
          GROUP_ID: ${{ secrets.GROUP_ID }}
          MESSAGE_THREAD_ID: ${{ secrets.MESSAGE_THREAD_ID }}
          GITHUB_SHA: ${{ github.sha }}
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          envs: BOT_TOKEN,GROUP_ID,MESSAGE_THREAD_ID,GITHUB_SHA,DOCKERHUB_USERNAME
          script: |
            # Проверяем и устанавливаем необходимые пакеты
            if ! command -v docker &> /dev/null; then
              echo "Docker не установлен. Установка..."
              sudo apt-get update
              sudo apt-get install -y docker.io
            fi

            if ! command -v curl &> /dev/null; then
              echo "Curl не установлен. Установка..."
              sudo apt-get update
              sudo apt-get install -y curl
            fi
            
            # Создаем директорию если её нет
            mkdir -p ~/prod-bot
            
            # Создаем docker-compose.yml
            cat > ~/prod-bot/docker-compose.yml << EOL
            version: '3.8'
            
            services:
              bot:
                image: ${DOCKERHUB_USERNAME}/vash-nash-bot:${GITHUB_SHA}
                env_file: .env
                restart: unless-stopped
            EOL
            
            # Создаем или обновляем .env файл
            echo "BOT_TOKEN=$BOT_TOKEN" > ~/prod-bot/.env
            echo "GROUP_ID=$GROUP_ID" >> ~/prod-bot/.env
            echo "MESSAGE_THREAD_ID=$MESSAGE_THREAD_ID" >> ~/prod-bot/.env
            echo "GITHUB_SHA=$GITHUB_SHA" >> ~/prod-bot/.env
            
            # Устанавливаем docker compose если его нет
            if ! command -v docker-compose &> /dev/null; then
              echo "Docker Compose не установлен. Установка..."
              sudo mkdir -p /usr/local/bin
              sudo curl -L "https://github.com/docker/compose/releases/download/v2.24.5/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
              sudo chmod +x /usr/local/bin/docker-compose
              
              # Проверяем успешность установки
              if ! command -v docker-compose &> /dev/null; then
                echo "Ошибка: Docker Compose не установлен"
                exit 1
              fi
            fi
            
            # В обоих deploy скриптах после установки docker
            if ! groups | grep -q docker; then
              echo "Добавляем пользователя в группу docker..."
              sudo usermod -aG docker $USER
              # Перезагружаем группы
              newgrp docker
            fi
            
            cd ~/prod-bot
            docker-compose down || true
            echo "Pulling image: ${DOCKERHUB_USERNAME}/vash-nash-bot:${GITHUB_SHA}"
            docker-compose pull
            echo "Starting container..."
            docker-compose up -d
            echo "Checking container status..."
            docker-compose ps 